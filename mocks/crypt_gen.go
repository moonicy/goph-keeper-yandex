// Code generated by mockery v2.49.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Crypt is an autogenerated mock type for the Crypt type
type Crypt struct {
	mock.Mock
}

type Crypt_Expecter struct {
	mock *mock.Mock
}

func (_m *Crypt) EXPECT() *Crypt_Expecter {
	return &Crypt_Expecter{mock: &_m.Mock}
}

// Clean provides a mock function with given fields:
func (_m *Crypt) Clean() {
	_m.Called()
}

// Crypt_Clean_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clean'
type Crypt_Clean_Call struct {
	*mock.Call
}

// Clean is a helper method to define mock.On call
func (_e *Crypt_Expecter) Clean() *Crypt_Clean_Call {
	return &Crypt_Clean_Call{Call: _e.mock.On("Clean")}
}

func (_c *Crypt_Clean_Call) Run(run func()) *Crypt_Clean_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Crypt_Clean_Call) Return() *Crypt_Clean_Call {
	_c.Call.Return()
	return _c
}

func (_c *Crypt_Clean_Call) RunAndReturn(run func()) *Crypt_Clean_Call {
	_c.Call.Return(run)
	return _c
}

// Decrypt provides a mock function with given fields: encryptedData
func (_m *Crypt) Decrypt(encryptedData []byte) ([]byte, error) {
	ret := _m.Called(encryptedData)

	if len(ret) == 0 {
		panic("no return value specified for Decrypt")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) ([]byte, error)); ok {
		return rf(encryptedData)
	}
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(encryptedData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(encryptedData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Crypt_Decrypt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decrypt'
type Crypt_Decrypt_Call struct {
	*mock.Call
}

// Decrypt is a helper method to define mock.On call
//   - encryptedData []byte
func (_e *Crypt_Expecter) Decrypt(encryptedData interface{}) *Crypt_Decrypt_Call {
	return &Crypt_Decrypt_Call{Call: _e.mock.On("Decrypt", encryptedData)}
}

func (_c *Crypt_Decrypt_Call) Run(run func(encryptedData []byte)) *Crypt_Decrypt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *Crypt_Decrypt_Call) Return(_a0 []byte, _a1 error) *Crypt_Decrypt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Crypt_Decrypt_Call) RunAndReturn(run func([]byte) ([]byte, error)) *Crypt_Decrypt_Call {
	_c.Call.Return(run)
	return _c
}

// Encrypt provides a mock function with given fields: plaintext
func (_m *Crypt) Encrypt(plaintext []byte) ([]byte, error) {
	ret := _m.Called(plaintext)

	if len(ret) == 0 {
		panic("no return value specified for Encrypt")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) ([]byte, error)); ok {
		return rf(plaintext)
	}
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(plaintext)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(plaintext)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Crypt_Encrypt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encrypt'
type Crypt_Encrypt_Call struct {
	*mock.Call
}

// Encrypt is a helper method to define mock.On call
//   - plaintext []byte
func (_e *Crypt_Expecter) Encrypt(plaintext interface{}) *Crypt_Encrypt_Call {
	return &Crypt_Encrypt_Call{Call: _e.mock.On("Encrypt", plaintext)}
}

func (_c *Crypt_Encrypt_Call) Run(run func(plaintext []byte)) *Crypt_Encrypt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *Crypt_Encrypt_Call) Return(_a0 []byte, _a1 error) *Crypt_Encrypt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Crypt_Encrypt_Call) RunAndReturn(run func([]byte) ([]byte, error)) *Crypt_Encrypt_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields: password, salt
func (_m *Crypt) Init(password string, salt string) {
	_m.Called(password, salt)
}

// Crypt_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type Crypt_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - password string
//   - salt string
func (_e *Crypt_Expecter) Init(password interface{}, salt interface{}) *Crypt_Init_Call {
	return &Crypt_Init_Call{Call: _e.mock.On("Init", password, salt)}
}

func (_c *Crypt_Init_Call) Run(run func(password string, salt string)) *Crypt_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Crypt_Init_Call) Return() *Crypt_Init_Call {
	_c.Call.Return()
	return _c
}

func (_c *Crypt_Init_Call) RunAndReturn(run func(string, string)) *Crypt_Init_Call {
	_c.Call.Return(run)
	return _c
}

// NewCrypt creates a new instance of Crypt. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCrypt(t interface {
	mock.TestingT
	Cleanup(func())
}) *Crypt {
	mock := &Crypt{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
