// Code generated by mockery v2.49.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// ICryptPass is an autogenerated mock type for the ICryptPass type
type ICryptPass struct {
	mock.Mock
}

type ICryptPass_Expecter struct {
	mock *mock.Mock
}

func (_m *ICryptPass) EXPECT() *ICryptPass_Expecter {
	return &ICryptPass_Expecter{mock: &_m.Mock}
}

// ComparePasswords provides a mock function with given fields: hashedPassword, password
func (_m *ICryptPass) ComparePasswords(hashedPassword string, password string) bool {
	ret := _m.Called(hashedPassword, password)

	if len(ret) == 0 {
		panic("no return value specified for ComparePasswords")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(hashedPassword, password)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ICryptPass_ComparePasswords_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ComparePasswords'
type ICryptPass_ComparePasswords_Call struct {
	*mock.Call
}

// ComparePasswords is a helper method to define mock.On call
//   - hashedPassword string
//   - password string
func (_e *ICryptPass_Expecter) ComparePasswords(hashedPassword interface{}, password interface{}) *ICryptPass_ComparePasswords_Call {
	return &ICryptPass_ComparePasswords_Call{Call: _e.mock.On("ComparePasswords", hashedPassword, password)}
}

func (_c *ICryptPass_ComparePasswords_Call) Run(run func(hashedPassword string, password string)) *ICryptPass_ComparePasswords_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *ICryptPass_ComparePasswords_Call) Return(_a0 bool) *ICryptPass_ComparePasswords_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ICryptPass_ComparePasswords_Call) RunAndReturn(run func(string, string) bool) *ICryptPass_ComparePasswords_Call {
	_c.Call.Return(run)
	return _c
}

// HashPassword provides a mock function with given fields: password
func (_m *ICryptPass) HashPassword(password string) (string, error) {
	ret := _m.Called(password)

	if len(ret) == 0 {
		panic("no return value specified for HashPassword")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(password)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ICryptPass_HashPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashPassword'
type ICryptPass_HashPassword_Call struct {
	*mock.Call
}

// HashPassword is a helper method to define mock.On call
//   - password string
func (_e *ICryptPass_Expecter) HashPassword(password interface{}) *ICryptPass_HashPassword_Call {
	return &ICryptPass_HashPassword_Call{Call: _e.mock.On("HashPassword", password)}
}

func (_c *ICryptPass_HashPassword_Call) Run(run func(password string)) *ICryptPass_HashPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ICryptPass_HashPassword_Call) Return(_a0 string, _a1 error) *ICryptPass_HashPassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ICryptPass_HashPassword_Call) RunAndReturn(run func(string) (string, error)) *ICryptPass_HashPassword_Call {
	_c.Call.Return(run)
	return _c
}

// NewICryptPass creates a new instance of ICryptPass. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICryptPass(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICryptPass {
	mock := &ICryptPass{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
