// Code generated by mockery v2.49.1. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/moonicy/goph-keeper-yandex/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// DataRepository is an autogenerated mock type for the DataRepository type
type DataRepository struct {
	mock.Mock
}

type DataRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *DataRepository) EXPECT() *DataRepository_Expecter {
	return &DataRepository_Expecter{mock: &_m.Mock}
}

// AddData provides a mock function with given fields: ctx, data
func (_m *DataRepository) AddData(ctx context.Context, data entity.Data) error {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for AddData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Data) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataRepository_AddData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddData'
type DataRepository_AddData_Call struct {
	*mock.Call
}

// AddData is a helper method to define mock.On call
//   - ctx context.Context
//   - data entity.Data
func (_e *DataRepository_Expecter) AddData(ctx interface{}, data interface{}) *DataRepository_AddData_Call {
	return &DataRepository_AddData_Call{Call: _e.mock.On("AddData", ctx, data)}
}

func (_c *DataRepository_AddData_Call) Run(run func(ctx context.Context, data entity.Data)) *DataRepository_AddData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.Data))
	})
	return _c
}

func (_c *DataRepository_AddData_Call) Return(_a0 error) *DataRepository_AddData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataRepository_AddData_Call) RunAndReturn(run func(context.Context, entity.Data) error) *DataRepository_AddData_Call {
	_c.Call.Return(run)
	return _c
}

// GetData provides a mock function with given fields: ctx, userID
func (_m *DataRepository) GetData(ctx context.Context, userID uint64) ([]entity.Data, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetData")
	}

	var r0 []entity.Data
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) ([]entity.Data, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) []entity.Data); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Data)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DataRepository_GetData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetData'
type DataRepository_GetData_Call struct {
	*mock.Call
}

// GetData is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uint64
func (_e *DataRepository_Expecter) GetData(ctx interface{}, userID interface{}) *DataRepository_GetData_Call {
	return &DataRepository_GetData_Call{Call: _e.mock.On("GetData", ctx, userID)}
}

func (_c *DataRepository_GetData_Call) Run(run func(ctx context.Context, userID uint64)) *DataRepository_GetData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *DataRepository_GetData_Call) Return(_a0 []entity.Data, _a1 error) *DataRepository_GetData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DataRepository_GetData_Call) RunAndReturn(run func(context.Context, uint64) ([]entity.Data, error)) *DataRepository_GetData_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveData provides a mock function with given fields: ctx, id
func (_m *DataRepository) RemoveData(ctx context.Context, id uint64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for RemoveData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataRepository_RemoveData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveData'
type DataRepository_RemoveData_Call struct {
	*mock.Call
}

// RemoveData is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint64
func (_e *DataRepository_Expecter) RemoveData(ctx interface{}, id interface{}) *DataRepository_RemoveData_Call {
	return &DataRepository_RemoveData_Call{Call: _e.mock.On("RemoveData", ctx, id)}
}

func (_c *DataRepository_RemoveData_Call) Run(run func(ctx context.Context, id uint64)) *DataRepository_RemoveData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *DataRepository_RemoveData_Call) Return(_a0 error) *DataRepository_RemoveData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataRepository_RemoveData_Call) RunAndReturn(run func(context.Context, uint64) error) *DataRepository_RemoveData_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateData provides a mock function with given fields: ctx, data
func (_m *DataRepository) UpdateData(ctx context.Context, data entity.Data) error {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for UpdateData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Data) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataRepository_UpdateData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateData'
type DataRepository_UpdateData_Call struct {
	*mock.Call
}

// UpdateData is a helper method to define mock.On call
//   - ctx context.Context
//   - data entity.Data
func (_e *DataRepository_Expecter) UpdateData(ctx interface{}, data interface{}) *DataRepository_UpdateData_Call {
	return &DataRepository_UpdateData_Call{Call: _e.mock.On("UpdateData", ctx, data)}
}

func (_c *DataRepository_UpdateData_Call) Run(run func(ctx context.Context, data entity.Data)) *DataRepository_UpdateData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.Data))
	})
	return _c
}

func (_c *DataRepository_UpdateData_Call) Return(_a0 error) *DataRepository_UpdateData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataRepository_UpdateData_Call) RunAndReturn(run func(context.Context, entity.Data) error) *DataRepository_UpdateData_Call {
	_c.Call.Return(run)
	return _c
}

// NewDataRepository creates a new instance of DataRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDataRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *DataRepository {
	mock := &DataRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
