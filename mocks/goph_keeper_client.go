// Code generated by mockery v2.49.1. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	proto "github.com/moonicy/goph-keeper-yandex/proto"
)

// GophKeeperClient is an autogenerated mock type for the GophKeeperClient type
type GophKeeperClient struct {
	mock.Mock
}

type GophKeeperClient_Expecter struct {
	mock *mock.Mock
}

func (_m *GophKeeperClient) EXPECT() *GophKeeperClient_Expecter {
	return &GophKeeperClient_Expecter{mock: &_m.Mock}
}

// AddData provides a mock function with given fields: ctx, in, opts
func (_m *GophKeeperClient) AddData(ctx context.Context, in *proto.AddDataRequest, opts ...grpc.CallOption) (*proto.AddDataResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddData")
	}

	var r0 *proto.AddDataResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.AddDataRequest, ...grpc.CallOption) (*proto.AddDataResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.AddDataRequest, ...grpc.CallOption) *proto.AddDataResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.AddDataResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.AddDataRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GophKeeperClient_AddData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddData'
type GophKeeperClient_AddData_Call struct {
	*mock.Call
}

// AddData is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.AddDataRequest
//   - opts ...grpc.CallOption
func (_e *GophKeeperClient_Expecter) AddData(ctx interface{}, in interface{}, opts ...interface{}) *GophKeeperClient_AddData_Call {
	return &GophKeeperClient_AddData_Call{Call: _e.mock.On("AddData",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *GophKeeperClient_AddData_Call) Run(run func(ctx context.Context, in *proto.AddDataRequest, opts ...grpc.CallOption)) *GophKeeperClient_AddData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.AddDataRequest), variadicArgs...)
	})
	return _c
}

func (_c *GophKeeperClient_AddData_Call) Return(_a0 *proto.AddDataResponse, _a1 error) *GophKeeperClient_AddData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GophKeeperClient_AddData_Call) RunAndReturn(run func(context.Context, *proto.AddDataRequest, ...grpc.CallOption) (*proto.AddDataResponse, error)) *GophKeeperClient_AddData_Call {
	_c.Call.Return(run)
	return _c
}

// GetData provides a mock function with given fields: ctx, in, opts
func (_m *GophKeeperClient) GetData(ctx context.Context, in *proto.GetDataRequest, opts ...grpc.CallOption) (*proto.GetDataResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetData")
	}

	var r0 *proto.GetDataResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.GetDataRequest, ...grpc.CallOption) (*proto.GetDataResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.GetDataRequest, ...grpc.CallOption) *proto.GetDataResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetDataResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.GetDataRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GophKeeperClient_GetData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetData'
type GophKeeperClient_GetData_Call struct {
	*mock.Call
}

// GetData is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.GetDataRequest
//   - opts ...grpc.CallOption
func (_e *GophKeeperClient_Expecter) GetData(ctx interface{}, in interface{}, opts ...interface{}) *GophKeeperClient_GetData_Call {
	return &GophKeeperClient_GetData_Call{Call: _e.mock.On("GetData",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *GophKeeperClient_GetData_Call) Run(run func(ctx context.Context, in *proto.GetDataRequest, opts ...grpc.CallOption)) *GophKeeperClient_GetData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.GetDataRequest), variadicArgs...)
	})
	return _c
}

func (_c *GophKeeperClient_GetData_Call) Return(_a0 *proto.GetDataResponse, _a1 error) *GophKeeperClient_GetData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GophKeeperClient_GetData_Call) RunAndReturn(run func(context.Context, *proto.GetDataRequest, ...grpc.CallOption) (*proto.GetDataResponse, error)) *GophKeeperClient_GetData_Call {
	_c.Call.Return(run)
	return _c
}

// LoginUser provides a mock function with given fields: ctx, in, opts
func (_m *GophKeeperClient) LoginUser(ctx context.Context, in *proto.LoginUserRequest, opts ...grpc.CallOption) (*proto.LoginUserResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LoginUser")
	}

	var r0 *proto.LoginUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.LoginUserRequest, ...grpc.CallOption) (*proto.LoginUserResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.LoginUserRequest, ...grpc.CallOption) *proto.LoginUserResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.LoginUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.LoginUserRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GophKeeperClient_LoginUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoginUser'
type GophKeeperClient_LoginUser_Call struct {
	*mock.Call
}

// LoginUser is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.LoginUserRequest
//   - opts ...grpc.CallOption
func (_e *GophKeeperClient_Expecter) LoginUser(ctx interface{}, in interface{}, opts ...interface{}) *GophKeeperClient_LoginUser_Call {
	return &GophKeeperClient_LoginUser_Call{Call: _e.mock.On("LoginUser",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *GophKeeperClient_LoginUser_Call) Run(run func(ctx context.Context, in *proto.LoginUserRequest, opts ...grpc.CallOption)) *GophKeeperClient_LoginUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.LoginUserRequest), variadicArgs...)
	})
	return _c
}

func (_c *GophKeeperClient_LoginUser_Call) Return(_a0 *proto.LoginUserResponse, _a1 error) *GophKeeperClient_LoginUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GophKeeperClient_LoginUser_Call) RunAndReturn(run func(context.Context, *proto.LoginUserRequest, ...grpc.CallOption) (*proto.LoginUserResponse, error)) *GophKeeperClient_LoginUser_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterUser provides a mock function with given fields: ctx, in, opts
func (_m *GophKeeperClient) RegisterUser(ctx context.Context, in *proto.RegisterUserRequest, opts ...grpc.CallOption) (*proto.RegisterUserResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 *proto.RegisterUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.RegisterUserRequest, ...grpc.CallOption) (*proto.RegisterUserResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.RegisterUserRequest, ...grpc.CallOption) *proto.RegisterUserResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.RegisterUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.RegisterUserRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GophKeeperClient_RegisterUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterUser'
type GophKeeperClient_RegisterUser_Call struct {
	*mock.Call
}

// RegisterUser is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.RegisterUserRequest
//   - opts ...grpc.CallOption
func (_e *GophKeeperClient_Expecter) RegisterUser(ctx interface{}, in interface{}, opts ...interface{}) *GophKeeperClient_RegisterUser_Call {
	return &GophKeeperClient_RegisterUser_Call{Call: _e.mock.On("RegisterUser",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *GophKeeperClient_RegisterUser_Call) Run(run func(ctx context.Context, in *proto.RegisterUserRequest, opts ...grpc.CallOption)) *GophKeeperClient_RegisterUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.RegisterUserRequest), variadicArgs...)
	})
	return _c
}

func (_c *GophKeeperClient_RegisterUser_Call) Return(_a0 *proto.RegisterUserResponse, _a1 error) *GophKeeperClient_RegisterUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GophKeeperClient_RegisterUser_Call) RunAndReturn(run func(context.Context, *proto.RegisterUserRequest, ...grpc.CallOption) (*proto.RegisterUserResponse, error)) *GophKeeperClient_RegisterUser_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveData provides a mock function with given fields: ctx, in, opts
func (_m *GophKeeperClient) RemoveData(ctx context.Context, in *proto.RemoveDataRequest, opts ...grpc.CallOption) (*proto.RemoveDataResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveData")
	}

	var r0 *proto.RemoveDataResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.RemoveDataRequest, ...grpc.CallOption) (*proto.RemoveDataResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.RemoveDataRequest, ...grpc.CallOption) *proto.RemoveDataResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.RemoveDataResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.RemoveDataRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GophKeeperClient_RemoveData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveData'
type GophKeeperClient_RemoveData_Call struct {
	*mock.Call
}

// RemoveData is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.RemoveDataRequest
//   - opts ...grpc.CallOption
func (_e *GophKeeperClient_Expecter) RemoveData(ctx interface{}, in interface{}, opts ...interface{}) *GophKeeperClient_RemoveData_Call {
	return &GophKeeperClient_RemoveData_Call{Call: _e.mock.On("RemoveData",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *GophKeeperClient_RemoveData_Call) Run(run func(ctx context.Context, in *proto.RemoveDataRequest, opts ...grpc.CallOption)) *GophKeeperClient_RemoveData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.RemoveDataRequest), variadicArgs...)
	})
	return _c
}

func (_c *GophKeeperClient_RemoveData_Call) Return(_a0 *proto.RemoveDataResponse, _a1 error) *GophKeeperClient_RemoveData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GophKeeperClient_RemoveData_Call) RunAndReturn(run func(context.Context, *proto.RemoveDataRequest, ...grpc.CallOption) (*proto.RemoveDataResponse, error)) *GophKeeperClient_RemoveData_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateData provides a mock function with given fields: ctx, in, opts
func (_m *GophKeeperClient) UpdateData(ctx context.Context, in *proto.UpdateDataRequest, opts ...grpc.CallOption) (*proto.UpdateDataResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateData")
	}

	var r0 *proto.UpdateDataResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.UpdateDataRequest, ...grpc.CallOption) (*proto.UpdateDataResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.UpdateDataRequest, ...grpc.CallOption) *proto.UpdateDataResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.UpdateDataResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.UpdateDataRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GophKeeperClient_UpdateData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateData'
type GophKeeperClient_UpdateData_Call struct {
	*mock.Call
}

// UpdateData is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.UpdateDataRequest
//   - opts ...grpc.CallOption
func (_e *GophKeeperClient_Expecter) UpdateData(ctx interface{}, in interface{}, opts ...interface{}) *GophKeeperClient_UpdateData_Call {
	return &GophKeeperClient_UpdateData_Call{Call: _e.mock.On("UpdateData",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *GophKeeperClient_UpdateData_Call) Run(run func(ctx context.Context, in *proto.UpdateDataRequest, opts ...grpc.CallOption)) *GophKeeperClient_UpdateData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.UpdateDataRequest), variadicArgs...)
	})
	return _c
}

func (_c *GophKeeperClient_UpdateData_Call) Return(_a0 *proto.UpdateDataResponse, _a1 error) *GophKeeperClient_UpdateData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GophKeeperClient_UpdateData_Call) RunAndReturn(run func(context.Context, *proto.UpdateDataRequest, ...grpc.CallOption) (*proto.UpdateDataResponse, error)) *GophKeeperClient_UpdateData_Call {
	_c.Call.Return(run)
	return _c
}

// NewGophKeeperClient creates a new instance of GophKeeperClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGophKeeperClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *GophKeeperClient {
	mock := &GophKeeperClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
