// Code generated by mockery v2.49.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// ITokenGenerator is an autogenerated mock type for the ITokenGenerator type
type ITokenGenerator struct {
	mock.Mock
}

type ITokenGenerator_Expecter struct {
	mock *mock.Mock
}

func (_m *ITokenGenerator) EXPECT() *ITokenGenerator_Expecter {
	return &ITokenGenerator_Expecter{mock: &_m.Mock}
}

// GenerateToken provides a mock function with given fields: userID
func (_m *ITokenGenerator) GenerateToken(userID uint64) (string, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (string, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint64) string); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ITokenGenerator_GenerateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateToken'
type ITokenGenerator_GenerateToken_Call struct {
	*mock.Call
}

// GenerateToken is a helper method to define mock.On call
//   - userID uint64
func (_e *ITokenGenerator_Expecter) GenerateToken(userID interface{}) *ITokenGenerator_GenerateToken_Call {
	return &ITokenGenerator_GenerateToken_Call{Call: _e.mock.On("GenerateToken", userID)}
}

func (_c *ITokenGenerator_GenerateToken_Call) Run(run func(userID uint64)) *ITokenGenerator_GenerateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *ITokenGenerator_GenerateToken_Call) Return(_a0 string, _a1 error) *ITokenGenerator_GenerateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ITokenGenerator_GenerateToken_Call) RunAndReturn(run func(uint64) (string, error)) *ITokenGenerator_GenerateToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewITokenGenerator creates a new instance of ITokenGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewITokenGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *ITokenGenerator {
	mock := &ITokenGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
